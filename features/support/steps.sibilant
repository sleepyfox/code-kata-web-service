;; features/support/steps.sibilant
(var { Given, When, Then } (require 'cucumber)
     assert (require 'assert)
     request (require 'request))

(var ACCOUNT_SERVICE "http://localhost:8080"
     ADMIN_TOKEN process.env.ADMIN_TOKEN)

(Given "that there is no account for mmouse@disney.com"
       (# (done)
          (request.delete (+ ACCOUNT_SERVICE "/account/mmouse%40disney.com")
                          {'headers { 'cookie ADMIN_TOKEN }}
                          (# (err resp body)
                             (if err
                               (do
                                 (console.log "Error" err)
                                 (done))
                               ;; else
                               (if (= resp.status-code 200)
                                 (done)
                                 (do
                                   (console.log "body was" body)
                                   (throw (new Error (+ "status of DELETE was " resp.status-code))))))))))

(Given "an active account for Mickey Mouse"
       (# (done)
          ;; Then create the mmouse account
          (request.post (+ ACCOUNT_SERVICE "/account/mmouse%40disney.com")
                        {'json {'email "mmouse@disney.com"
                                'password "minnie"
                                'company_id 99
                                'name "Michael Mouse"}
                         'headers { 'cookie ADMIN_TOKEN }}
                        (# (err resp body)
                           (if err
                             (do
                               (console.log "Error" err)
                               (done))
                             ;; else
                             (if (or (= resp.status-code 201)
                                     (= resp.status-code 409))
                               (done)
                               (throw (new Error (+ "status of POST was " resp.status-code)))))))))

(Given (regex "^that we have logged in as (.*) and gotten a token")
       (# (user done)
          (var that this
               password (if (= user "admin@gower.st")
                          "grumpycat"
                          "minnie"))
          (request.get (+ ACCOUNT_SERVICE "/account/authenticate/" user)
                       { 'json { 'password password }}
                       (# (err resp body)
                          (if err
                            (throw err))
                          (if (= resp.status-code 200)
                            (do
                              (that.set-token (first (get resp.headers "set-cookie")))
                              (done))
                            (throw (new Error (+ "status of POST was " resp.status-code))))))))

(Given "that we are not logged in"
       (#> (this.set-token "")))

(When (regex "^we send JSON (.*) with a GET to the path (.*)$")
      (# (obj url done)
         (var that this)
         (request.get (+ ACCOUNT_SERVICE url)
                      { 'json (JSON.parse obj) }
                      (# (err resp body)
                         (that.set-response resp)
                         (that.set-body body)
                         (done)))))

(When (regex "^we send JSON (.*) with a PUT to the path (.*)$")
      (# (obj url done)
         (var that this)
         (request.put (+ ACCOUNT_SERVICE url)
                      { 'json (JSON.parse obj) }
                      (# (err resp body)
                         (that.set-response resp)
                         (that.set-body body)
                         (done)))))

(When (regex "^we GET the path (.*)$")
      (# (url done)
         (var that this)
         (request.get (+ ACCOUNT_SERVICE url)
                      (# (err resp body)
                         (that.set-response resp)
                         (that.set-body (JSON.parse body))
                         (done)))))

(When (regex "^we POST an account to the path (.*)$")
      (# (url done)
         (var that this)
         (request.post (+ ACCOUNT_SERVICE url)
                       {'json {'email "mmouse@disney.com"
                               'password "minnie"
                               'name "Michael Mouse"
                               'company_id 99}
                        'headers { 'cookie this.token }}
                       (# (err resp body)
                          (that.set-response resp)
                          (that.set-body body)
                          (done)))))

(When (regex "^we try and change the password for user \"(.*)\" to \"(.*)\"$")
      (# (user new-password done)
         (var that this)
         (request.put (+ ACCOUNT_SERVICE "/account/change_password/" user)
                      {'json {'new_password new-password}
                       'headers {'cookie that.token}}
                      (# (err resp  body)
                         (that.set-response resp)
                         (that.set-body body)
                         (done)))))

(Then "we should get a reply with status 200 OK"
      (#> (assert.equal this.response.status-code 200)))

(Then "we should get a reply with status 201 CREATED"
      (#> (assert.equal this.response.status-code 201)))

(Then "we should get a reply with status 401 UNAUTHORIZED"
      (#> (assert.equal this.response.status-code 401)))

(Then "we should get a reply with status 409 CONFLICT"
      (#> (assert.equal this.response.status-code 409)))

(Then "the reply is a JSON object"
      (#> (var ct (get this 'response 'headers "content-type"))
          (assert.ok (.starts-with ct "application/json"))
          (assert.equal (typeof this.body) "object")))

(Then (regex "^the reply has an attribute \"(.*)\"$")
      (# (x)
         (assert.ok (has-key? this.body x))))

(Then (regex "^the \"(.*)\" attribute is a string$")
      (# (attr) (assert.equal "string" (typeof (get this.body attr)))))

(Then (regex "^the \"(.*)\" attribute is the string \"(.*)\"$")
      (# (attr val)
         (assert.ok (has-key? this.body attr))
         (assert.equal (get this.body attr) val)))

(Then (regex "^the \"(.*)\" attribute is the number ([0-9]+)$")
      (# (attr val)
         (assert.ok (has-key? this.body attr))
         (assert.equal (get this.body attr) val)))

(Then (regex "^the \"(.*)\" attribute is true$")
      (# (attr) (assert.ok (get this.body attr))))

(Then (regex "^the reply has a cookie set named \"(.*)\"$")
      (# (x)
         (var cookies (get this.response.headers "set-cookie"))
         (assert.ok (.starts-with (first cookies) 'token))))

(Then "we should be able to login with the new password {string}"
      (# (password done)
          (request.get (+ ACCOUNT_SERVICE "/account/authenticate/mmouse%40disney.com")
                       {'json {'password password}}
                       (# (err resp body)
                          (if err
                            (throw err))
                          (assert.equal 200 resp.status-code 200)
                          (done)))))
